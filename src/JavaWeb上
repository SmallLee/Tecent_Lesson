Tomcat启动
1.如果想要在命令行中直接输入startup.bat启动服务器，需要配置CATALINA_HOME和JAVA_HOME两个环境变量
执行startup.bat命令以后，会先检查CATALINA_HOME这个环境变量，然后执行这个环境变量下的
catAlina.bat命令，在这个命令中调用了setclasspath.bat命令，在这个命令中会去检查JAVA_HOME是否配置

2.如果重复启动一个tomcat,会报错，想要查看报错信息，用catalina run命令来启动tomcat,可以看到下面的错误提示
java.net.BindException: Address already in use: JVM_Bind

catalina start:在新的窗口启动服务器 catalina stop 关闭新窗口启动的服务器
catalina run：在当前窗口启动服务器，启动以后通过ctrl+C可以关闭服务器

<role rolename="manager-gui"/>
<user username="lxn" password="lxn" roles="manager-gui"/>


手动编写web应用放到tomcat目录下，运行时报错
Only a type can be imported. tencent.Person resolves to a package

3.创建项目找不到Servlet类的解决办法，File-Project Structure,点击+号，选择jars or directies,
选择tomcat目录里lib下的servlet-api.jar

4.创建一个类，实现Servlet类，并实现对应的方法，
配置
 <!--配置和映射Servlet-->
    <servlet>
        //Servlet注册的名字
        <servlet-name>HelloServlet</servlet-name>
        <servlet-class>tencent.HelloServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        //需要和Servlet文本节点的名称一样
        <servlet-name>HelloServlet</servlet-name>
        <url-pattern>/hello</url-pattern>
    </servlet-mapping>

 5.启动服务器访问Servlet时，依次执行下面的方法(4个生命周期相关的方法)
HelloServlet constructor：创建servlet实例时调用
init：创建完对象后立即调用，用于初始化servlet
service
关闭时调用servlet的destory方法
destory:释放servlet占用的资源

6.load-on-startup:制定servlet创建的时机，负数代表第一次请求的时候创建，0或证书代表当前web应用被Servlet容器加载的
时候创建，数值越小优先级越高，也就是越早被创建

一个servlet可以对应多个servlet-mapping
7.url-pattern可以使用通配符*，只能用下面两种方式
    a:*.后缀名
    b:以/开头，以/*结尾，例如/action/*

8.配置任意路径下的web应用
    在tomcat的conf\Catalina\localhost路径下新建一个xml文件，这里取名为helloworld.xml
    内容如下
    <Context path="/test" docBase = "D:\\helloworld" reloadable="true">
    </Context>

    path:Context的上下文路径，一个Servlet对应一个唯一的上下文路径，而这个名称只要唯一就行，至于是什么名称，没有限定。
    docBase指定项目的真实存放路径
    reloadable：如果设置为true，Tomcat服务器在运行时，会监视WEB-INF/classes和WEB-INF/lib目录下类的改变，如果发现有类被更新，
    Tomcat服务器将自动重新加载该Web应用程序。这个特性在应用程序开发阶段非常有用，
    但是它需要额外的运行时开销，所以在产品发布时不建议使用。该属性的默认值是false。
9.ServletConfig
    方法 getInitParameterNames
    getServletName获得注册的Servlet的名字
    getInitParameter
    getServletContext

10.HTTP请求和响应
   请求结构：请求行，请求头，一个空行，试题内容
   响应结构：状态行，消息头，一个空行，响应实体
11.在浏览器地址输入某个url访问或者单击链接访问url，都是get请求，get请求的数据在1k以下
    get请求把表单的字段和数据封装在请求实体中

  客户端请求：
  GET /hello.txt HTTP/1.1
  User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
  Host: www.example.com
  Accept-Language: en, mi

 服务端响应：
    HTTP/1.1 200 OK
    Date: Mon, 27 Jul 2009 12:28:53 GMT
    Server: Apache
    Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
    ETag: "34aa387-d-1568eb00"
    Accept-Ranges: bytes
    Content-Length: 51
    Vary: Accept-Encoding
    Content-Type: text/plain
12.ServletRequest
    getParameter:若参数有多个值，只能获得第一个
    getParameterMap
    getParameterNames
    getParameterValues：获取名称对应的数组
  通过子接口HttpServletRequest可以获得与HTTP请求有关的数据

13.ServletResponse
    getOutputStream
    getWriter
    子接口HttpServletResponse,重要方法sendRedirect

14.继承HttpServlet重写init(ServletConfig config)方法的时候，要调用super.init，否则会报空指针异常
不建议重写带参数的init方法，容易报空指针异常
建议重写init()方法

15.JSP
jsp文件可以放置在除了WEB-INF及其子目录之外的任何目录

16.JSP内置对象
    request:HttpServletRequest的对象
    response
    pageContext:上下文对象，可以获取其他内置对象，以及获取页面的信息
    session:
    application:代表当前web应用，ServletContext对象
    config:代表ServletConfig对象，可以获取配置参数，需要把jsp指定为servlet，在web.xml中通过jsp-file指定
    out:JSPWriter对象
    page:指向当前JSP对应的Servlet的引用

17.JSP脚本片段：嵌套在<%%>之间的java代码
   JSP声明：<%!%>被声明的方法，被插入到_jspService方法之外

18.对象的作用域
pageContext:仅在当前页面
request:一次请求(在有转发的情况下可以跨页面获取值)
session:一次会话
application:整个应用

19.请求的转发和重定向
    本质区别：转发是一次请求，重定向是两次
   a:地址栏不一样
   b:request对象不一样
   c:转发只能转发当前WEB应用的资源，重定向可以定向到任何资源
   d:转发：/代表当前web应用的根目录
   重定向：/代表当前web站点的根目录
 20.JSP页面指令
  page
  include(包含的两个页面的编码要一致，否则会报错)
  Page directive: illegal to have multiple occurrences of contentType with different values
  taglib
  对TOMCAT而言，WEB-INF下面的文件不能在浏览器中访问，但可以通过转发访问

  contentType:指定JSP页面的响应类型

  21.在web.xml中配置错误页面
  <error-page>
          <error-code>500</error-code>
          <location>/WEB-INF/error.jsp</location>
            <exception-type>错误类型</exception-type>
      </error-page>

charset指定响应的页面的编码，pageEncoding指定当前JSP页面的编码，通常两者一致

22.以斜杠开头，表示web应用的根目录，否则，相对于当前文件

23.动态包含和静态包含的区别
    静态包含：把被包含页面中除了编译指令之外的代码都包含进来到当前页面的body元素之内，生成一个Servlet文件
    动态包含：通过命令包含
    org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "a.jsp", out, false);
    生成两个Servlet文件
23.jsp:forward等同于request.getRequestDispatcher("a.jsp").forward(request,response);
区别是jsp:forward可以通过jsp:param传递参数(jsp:include也可以传递参数)

24.乱码问题
    请求页面显示中文：contentType="text/html;charset=UTF-8"和pageEncoding的值一致，通常建议是UTF-8
    获取中文参数：（默认是ISO-8859-1传递的）
        a:对于post请求，在获取参数之前调用request.setCharacterEncoding
        b：对于get请求
            可以使用下面的两种方式
            (1)byte[] value = request.getParameter("username").getBytes("ISO-8859-1");
            String str = new String(value,"UTF-8");
            (2)request.setCharacterEncoding，并且在tomcat的server.xml文件中加入useBodyEncodingForURI参数
             <Connector port="8080" protocol="HTTP/1.1"
                           connectionTimeout="20000"
                           redirectPort="8443" useBodyEncodingForURI="true"/>
             意思是采用body的编码方式

25.在JSP页面获取参数强转的时候，要用包装类型
boolean success = (Boolean) request.getAttribute("success");

26.MVC案例
    没有业务层，直接使用Servlet调用DAO,所以也没有事物操作，所以可以再DAO中获取Connection对象
    采取MVC设计模式
    使用到的技术
        MVC设计模式：Servlet,JSP,POJO
        数据库使用MySql
        连接数据库使用C3P0数据库连接池
        JDBC工具采用DButil
        页面上提示使用jQuery
    技术难点
        多个请求如何使用一个Servlet
        如何模糊查询
        如何在创建或者修改成功的时候，如何判断用户名已经存在，并给出提示
27.MVC中不能跨层访问，只能自上向下以来，不能自下向上以来

28.建表
    create table customer(id int primary key auto_increment,
    name varchar(30) not null unique,address varchar(10),phone varchar(10));
        +---------+-------------+------+-----+---------+----------------+
        | Field   | Type        | Null | Key | Default | Extra          |
        +---------+-------------+------+-----+---------+----------------+
        | id      | int(11)     | NO   | PRI | NULL    | auto_increment |
        | name    | varchar(20) | NO   | UNI | NULL    |                |
        | address | varchar(10) | YES  |     | NULL    |                |
        | phone   | varchar(10) | YES  |     | NULL    |                |
        +---------+-------------+------+-----+---------+----------------+
    给name添加唯一约束
    alter table customer add constraint name_uk unique(name);

29.IDEA进行单元测试步骤
    下载一个插件Junit Generator,安装完成之后再需要测试的类里面选择Generate--->Junit Test
    会生成对应的测试方法，如果@Test等注解报错，需要alt+回车导入junit的jar包，此时会导入两个包
    junit的jar包和hamcrest-core的jar包

 30.单元测试报错
 a:java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing(没导入hamcrest-core包，junit需要依赖这个包)
 b:java.lang.NoClassDefFoundError: com/mchange/v2/ser/Indirector(没有导入mchange-commons-java包，C3P0需要依赖这个包)
 c:java.lang.NoClassDefFoundError: com/mchange/v2/cfg/MConfig(缺少类，没有导入最新的mchange-commons-java包)

 31.C3P0的queryRunner查询报错
 java.sql.SQLException: Cannot create dao.Customer: dao.Customer Query: select * from customer Parameters: []
  没有给实体类提供无参数的构造方法

  32.通过反射获取泛型的参数类
  getClass().getGenericSuperclass()//通过反射获取当前类表示的实体类的直接父类的Type

  通过C3P0查询数据库需要给实体类提供set方法

  33.多个请求对应一个Servlet
        通过servlet的后缀名把多个请求映射到一个servlet
        通过request.getServletPath获取不同的映射
        截取出方法名，通过反射调用方法

  34.表格样式
  单元格内容居中
    <style>
            td{
                text-align: center;
            }
        </style>
        表格边框宽度为1，边框间距为1，
   <table border="1" cellpadding="10" cellspacing="0">

 35.被Test注解的单元测试方法不能有输入参数，并且必须是public void的