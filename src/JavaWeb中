1.Cookie
    a：创建Cookie对象
    b:设置Cookie时效(默认情况下是会话级别的Cookie,存储在浏览器的内存中，用户退出浏览器后被删除，若
    希望存储在磁盘上，则需要设置maxAge,单位是秒，最大时效设置为0是命令浏览器删除cookie,负数表示cookie永远不会被存储)
    c：添加到响应头

2.request.getCookies()//从请求中获取Cookie
  cookie.getName//获取cookie名字
  cookie.getValue//获取cookie的值
  cookie.setMaxAge//设置Cookie最大时效
  response.addCookie//添加cookie
  cookie.getMaxAge:获取最大时效

3.Cookie只对一个客户端有效，用其他浏览器访问时，第一次还是没有Cookie

4.删除Cookie
            tempCookie.setMaxAge(0);
           response.addCookie(tempCookie)
5.Cookie的作用范围
    当前目录和当前目录的子目录，但不能作用域当前目录的上一级目录
    可以通过cookie.setPath设置Cookie作用范围
    cookie.setPath("/")其中斜杠代表根目录，意思就是说根目录下的cookie是可见的

6.对Tomcat而言
    request.getScheme  http
    request.getServerName()---localhost
    request.getServerPort()---8080

    request.getContextPath是为了解决相对路径的问题，可返回站点的根路径
    如果当前文件在根路径下，则
    <a href="<%=request.getContextPath()%>/cookie/read.jsp">和
    <a href="cookie/read.jsp">效果一样

7.Session
    session通过sessionId区分不同的客户，session是以cookie或者url重写为基础的，默认使用Cookie实现，
    系统会使用一个JSESSIONID的Cookie,称之为session cookie,以区别persistent cookie
    session cookie是存储在内存中的
8.HttpSession生命周期
    a:什么时候不会新创建session对象？
        (1)当前资源是第一次访问，并且jsp的page指定的session为false
        (2)不是第一个资源，并且其他页面已经创建了session对象，则服务器不会为当前jsp页面创建session对象
        ，而是会把与当前会话关联的那个session对象返回来
    对于Servlet:若servlet是客户端访问的第一个资源，则只有调用了request.getSession或者request.getSession(true)时才创建

   Servlet中如何获取session
    request.getSession()
    b:什么时候销毁session
        调用session的invalidate
        服务器卸载了当前web应用
        超过了session的过期时间,session.setMaxInactiveInterval可以设置session的有效时间
        在web.xml中也可以设置session过期时间，单位分钟

9.在Cookie禁用的情况下，如何跟踪session
    通过URL重写

10.Session简易购物车
    当表单中有多选按钮，如果都不选，提交时，没有请求体信息,checkbox的name属性要相同
    request.setAttribute只在一个request内有效，如果重定向客户端，将取不到值。
    request.getSession().setAttribute可以通过sessionId得到自己的session，将参数
    存储到session中，即使重定向页面，也不会丢失
11.绝对路径和相对路径
    开发建议写绝对路径，写绝对路径肯定没问题，写相对路径可能有问题
    在由Servlet转发到JSP页面时，此时浏览器地址栏上显示的是Servlet的路径，而若JSP页面的超链接
    还是相对于该JSP页面的地址，则可能出现问题
    比如从a.jsp到Servlet,Servlet转发到b.jsp,b和c都在根目录下path文件夹里面，若此时b跳c的链接地址写的是c.jsp，就出问题

    编写绝对路径可以避免上面的问题

    JavaWeb中的/代表什么
        代表当前Web应用的根路径（/需要交给servlet处理）
                a:请求转发
                b：web.xml中配置的
        代表当前站点的跟路径(浏览器处理)
                a:超链接
                b:表单中的action
                c:请求重定向
         如何编写绝对路径：若是相对于当前站点根路径：在再其前面加上contextPath
         通过request或者application的getContextPath获得
   12.表单的重复提交情况
            a:表单提交到一个Servlet，Servlet转发到JSP页面，地址栏还保留这servlet的路径，这时候刷新页面
            b:在响应页面没有到达时，重复点击提交
            c:点击返回，再点提交
      不算重复提交情况：
        返回，刷新原来的页面，提交

        避免表单的重复提交：把标记放到session中
        a:在原表单页面生成一个随机token
        b：在原表单页面，把token放到session中
        c:在原表单页面，把token值放到隐藏域中

        d:在目标servlet中，获取session和隐藏域中的值
        e:比较两个值是否一致，一致，把session中的值清除
        f:不一致，响应重复提交


    13.超链接点击发送的是get请求
            request.setAttribute和需要结合转发获取数据

    14.JSP内置对象out的print和write方法区别
        a:out.print是JSPWriter的方法，out.write是弗雷Writer的方法
        b:如果两个方法输入的内容为null时，print方法会输出null，write会报空指针异常
        out.print(1)//输出1，因为prin方法直接将1转化为字符串1
        out.write(1)//看不到输出，write方法是将转化为ASCII码表中的字符，而1-32在对应的字符在页面上显示
        不出来

    15.从request中获取的中文参数，要和固定的中文字符串比较是否相等的话，注意此时的编码，固定中文字符串的
    编码是系统编码，只有编码的相同，才能比较值相等

    16.调用response.getWrite().write方法向页面写入中文时，需要调用
    resp.setContentType("text/html;charset=utf-8");

    17.向控制台打印固定中文字符串时，可能乱码，需要做对应的处理，例如
            resp.setContentType("text/html;charset=utf-8");
            PrintWriter writer = resp.getWriter();
            byte[] bytes = "重复提交".getBytes("gbk");
            writer.println(new String(bytes,"utf-8"));
            System.out.println(new String(bytes,"utf-8"));
    18.session实现验证码
        a:在原表单页面，生成一个验证码图片，并且把验证码放入session中
        b:定义一个文本域，用于输入验证码内容

        c:在目标Servlet中，获取session域的值和表单提交的值
        d:比较两个值是否相等，相等，则受理请求，且把session中的内容清除
        e:不一致，返回原页面，提示验证码不正确





   13.
        <jsp:useBean id="person" class="dao.Person" scope="request"/>
        上面代码的作用：
        从scope中获取属性名为id的值，赋给class对应的实体，
        如果获取的值为空，根据class类名通过反射创建一个新的对象，并且放入到scope的属性中，
        属性名是id，属性值为创建的对象

   使用jsp:setProperty时，如果property属性的值为*，则请求参数会赋值给对应的bean属性
   例如下面的请求：
   http://localhost:8080/useBean.jsp?age=10&name=lxn&address会分别给age,name.address赋值

   14.sessionScope.person.name
        相当于
        Person person = session.getAttribute("person");
        person.getName
    15.
    EL变量
        ${usename}//从范围小的开始取，page,request,session,application
    16.EL可以进行自动数据类型转化

    17.与输入有关的隐含对象
    param
    paramValues

    18.自定义标签步骤
        a:新建一个类实现SimpleTag接口，实现对应的方法
        b:新建标签描述文件tld，建议放在WEB-INF下，
        <?xml version="1.0" encoding="UTF-8"?>
        <taglib xmlns="http://java.sun.com/xml/ns/j2ee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
                version="2.0">
            <!--描述tld文件-->
            <description>Mytag 1.1 functions library</description>
            <display-name>Mytag functions sys</display-name>
            <tlib-version>1.1</tlib-version>
            <!--建议在jsp页面上使用的前缀-->
            <short-name>atguigu</short-name>
            <!--作为tld文件的id，唯一标识该文件，多个tld文件的url不能重复-->
            <uri>http://www.atguigu.com</uri>
            <!--描述自定义的HelloSimpleTag标签-->
            <tag>
                <!--标签名-->
                <name>hello</name>
                <!--标签处理类-->
                <tag-class>tag.HelloSimpleTag</tag-class>
                <!--标签体-->
                <body-content>empty</body-content>
            </tag>
        </taglib>
        c:在jsp页面通过taglib预编译指令引入tld文件
        <%@taglib prefix="h" uri="http://www.atguigu.com"  %>
        d:使用标签
            <前缀：标签名>

     19.带属性的标签
            a:在标签处理类中定义属性对应的setter方法
            b:在tld文件中对属性进行描述
                 <attribute>
                            <!--属性名-->
                            <name>value</name>
                            <!--属性是否是必须的,次标签要放在rtexprvalue之前，否则编译失败-->
                            <required>true</required>
                            <!--是否允许在运行时指定属性的值  runtime expression value-->
                            <rtexprvalue>true</rtexprvalue>
                        </attribute>
            c:使用属性

      20.带标签体的标签
            若配置了标签带有标签体，那么jsp引擎会调用setJspBody方法，把标签体对应的JspFragment对象传递给标签
            处理类，在SimpleTagSupport中还定义了一个getJspBody方法，用于返回JspFragment对象

            JspFragment的invoke(Writer)方法，把标签体的内容输出到Writer中，若为null,则等同于getJspContext.getOut
           <body-content>取值有三种：
           empty：没有标签体
           scriptless:标签体可以包含el表达式和jsp动作元素，不能包含jsp脚本元素
           tagdependent:标签体交由标签本身去处理，若指定tagdependent,则标签体中的内容会原封不动的交给
           标签处理类

       21.带父标签的标签体
            父标签无法获取子标签的引用，仅把子标签作为标签体使用
            子标签通过getParent可以获得父标签的引用，如果当前标签有父标签，那么JSP引擎会通过
            setParentTag把父标签的引用传递过来
            父标签的类型是JspTag,空接口，用来统一SimpleTag和Tag
            标签库API
                JspTag
                    ----SimpleTag(简单标签)
                    ----Tag(传统标签)
          在父标签的doTag中写getJspBody().invoke(null)的意思是让子标签能够得到执行，
          如果不写的话，子标签是无效的

            <atguigu:choose>
                  <atguigu:when test="${param.age > 24}">大学毕业</atguigu:when>
                  <atguigu:when test="${param.age > 20}">高中毕业</atguigu:when>
                  <atguigu:otherwise>小学毕业</atguigu:otherwise>
              </atguigu:choose>

