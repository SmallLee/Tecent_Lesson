1.使用el自定义函数，要导入jstl对应的jar包，有两个，jstl.jar和standard.jar，将这两个jar包放入到WEB-INF/lib下
官方下载地址如下http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/，
然后在jsp页面中导入<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
2.编写el自定义函数的步骤
    a:写一个类，定义一个public的静态方法
    b:在tld文件中进行描述
    <!--描述el自定义函数-->
        <function>
            <!--函数名-->
            <name>concat</name>
            <!--函数对应的处理类-->
            <function-class>el.MyElFunction</function-class>
            <!--方法签名-->
            <function-signature>java.lang.String concat(java.lang.String,java.lang.String)</function-signature>
        </function>
    c:在jsp页面使用
    <%@ taglib prefix="atguigu" uri="http://www.atguigu.com" %>
      ${atguigu:concat("a","b" )}
3.JSTL
    使用jstl标签库，需要先导入两个jar包
    然后在jsp页面中引入
    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
    标签
        <c:out>用于输出变量，(比el更强大，可以对敏感的字符进行自动转换)
        三个属性：
            value:要输出的值
            default:当value为null时，显示的值
            escapeXml:是否对特殊字符转化，默认为true
        <c:set> 用来将变量存储到JSP范围或者javabean的属性中
        <c:remove> 根据变量名移除对应范围内的属性
        <c:if>没有else，但是可以把判断的结果存储起来
        <c:choose when otherwise 可以实现if else if的地址
        c:choose必须以父标签存在
        c:when和c:otherwise不能单独存在
        c:otherwise必须放在c:when之后
4.URL操作
    <c:import>可以包含任何页面
      <c:redirect url="/jstl/jstl.jsp"/>  斜杠代表的是当前Web应用的根目录
      <c:url/> 产生一个url地址，可以根据cookie是否可用来智能进行url重写，对get请求的参数进行编码
        可以把产生的url存储在域对象的属性中

    数据库删除语句：delete from customer where name = 'xxx';
    模糊查询：select * from customer where name like '%%';(查询所有的)

  Filter
        拦截请求和响应
        需要在web.zml中配置和映射
  如何实现Filter
    当前类实现Filter接口，重写三个方法
    init
    doFilter
    destroy
    FilterChain Filter链，多个Filter构成一个Filter链
        doFilter:把当前请求传给下一个Filter,若当前Filter是最后一个，把请求给目标Servlet(JSP)
        多个Filter的拦截顺序和Filter在web.xml中<filter-mapping的>配置顺序有关

    多个Filter的代码执行顺序：
        假如有两个Filter,(A filter的filter-mapping配置在B的前面)目标页面是test.jsp,则代码的执行顺序是
        1，3，5，4，2
        A:
            System.out.println("before A filter");//1
            chain.doFilter
            System.out.println("before A filter");//2
         B:
             System.out.println("before B filter");//3
             chain.doFilter
             System.out.println("before B filter");//4

             test.jsp//5

      dispatcher节点，指定过滤器所拦截的资源被Servlet容器调用的方式，有REQUEST,FORWARD,INCLUDE,ERROR
         <filter-mapping>
                    <filter-name>HelloFilter</filter-name>
                    <url-pattern>/filter/test.jsp</url-pattern>
                    <dispatcher>FORWARD</dispatcher>
                </filter-mapping>
        指定错误处理的两种方式
            a:errorPage指定
            <%@ page contentType="text/html;charset=UTF-8" language="java" errorPage="test.jsp" %>
            b:在web.xml里配置
                     <error-page>
                        <exception-type>java.lang.ArithmeticException</exception-type>
                        <location>/filter/test.jsp</location>
                    </error-page>
        缓存案例
            //禁用浏览器的缓存
            response.setDateHeader("Expires",-1);
            response.setHeader("Cache-Contrl","no-cache");
            response.setHeader("Pragma","no-cache");
5.js中不能使用JSP的隐含对象进行输出
    例如下面的代码是无法向页面输出abcd的
         <script>
             <%out.print("dsfds");%>
         </script>
<form action="/authority?method=getAuthorities" method="post">
        Name: <input type="text" name="username">
        <input type="submit">
    </form>

   a:如果要获取action后拼接的参数，表单提交是的请求方法必须为post,否则无法获取到action中拼接的参数
   b:当action和表单域中有相同的参数名时，如果请求方式为get，那么获取的参数值是表单域中的
   如果请求方式为post，那么获取的参数是action中的
   c:在action中拼接参数，可以在对应的Servlet中通过request.getParameter()获取请求参数的值
   d:jstl中的运算符
        算术运算符 + 、 - 、 * 、 / （或 div ）和 % （或 mod ）
        关系运算符 == （或 eq ）、 != （或 ne ）、 < （或 lt ）、 > （或 gt ）、 <= （或 le ）和 >= （或 ge ）
        逻辑运算符 && （或 and ）、 || （或 or ）和 ! （或 not ）
        验证运算符 empty　

    表单action中路径写法
        <form action="<%=request.getContextPath()%>/authLoginServlet?method=login" method="post">
              Name:   <input type="text" name="username"><br>
             <input type="submit">
        </form>
    报错
        Cannot call sendRedirect() after the response has been committed
        出这个错的原因是在重定向后调用了chain.doFilter方法

    List的contains方法可以用来判断集合中是否包含某个对象，判断的依据是对象的equals的返回值，所以我们可以重写对象
    的equals方法，来定比比较规则

    6.HttpServletRequest在Tomcat中的实现为
    org.apache.catalina.connector.RequestFacade

    HttpServletRequestWrapper.对HttpServletRequest的方法进行了增强

    7.文件上传和下载
        采用post请求方式，参数放在Form Data中,此时请求体为
        Form Data:
        file:文件名

        当把enctype改为 enctype="multipart/form-data"时，此时请求体为
        Request Payload:
        ------WebKitFormBoundaryoTNkWnK0JBXfXZ8F
        Content-Disposition: form-data; name="file"; filename="QQ图片20171017164804.jpg"
        Content-Type: image/jpeg


        ------WebKitFormBoundaryoTNkWnK0JBXfXZ8F--

        表单需要上传文件时，请求方式必须为post，envtype指定为multipart/form-data，默认值是
        application/x-www-form-urlencoded,
        enctype指定数据发送到服务器时浏览器使用的编码类型：
         application/x-www-form-urlencoded：默认值，使用有限的字符集，当使用了非字母和数字时，
         必须用%HH(H代表16进制数字)，对于大容量的二进制数字或包含非ASCII字符的文本来说，这种编码不能
         满足要求。
         multipart/form-data：表示表单以二进制传输数据

         当表单的envtype改变时，不能再使用request.getParameter获取请求参数，此时以二进制的请求方式提交请求信息
        文本文件：

        7.表单中的button按钮默认情况下会自动提交表单，也就是默认的type类型是submit,为了防止点击按钮后
        自动提交表单，应该为button指定type属性
         <button class="addFile" type="button">新增一个组件</button>
